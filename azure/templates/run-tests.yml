steps:
  - bash: |
      make install-python
    workingDirectory: $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)
    displayName: Setup pytests
    condition: always()

  - bash: |
      export APIGEE_ACCESS_TOKEN=$(secret.AccessToken) \
      export PROXY_NAME=$(FULLY_QUALIFIED_SERVICE_NAME) \
      export SOURCE_COMMIT_ID=$(Build.SourceVersion) \
      
      if [[ $APIGEE_ENVIRONMENT == "prod" ]]
      then
       poetry run pytest --api-name=gp-connect-second-generation --proxy-name=$PROXY_NAME -v -m smoketest -o junit_logging=all --junitxml=test-report.xml
      elif [[ $APIGEE_ENVIRONMENT =~ .*-*sandbox ]]
      then
       poetry run pytest --api-name=gp-connect-second-generation --proxy-name=$PROXY_NAME -v  -o junit_logging=all --junitxml=test-report.xml
      else
       poetry run pytest --api-name=gp-connect-second-generation --proxy-name=$PROXY_NAME -v -o junit_logging=all --junitxml=test-report.xml
      fi
    workingDirectory: $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/tests
    displayName: Run full test suite

  - task: PublishTestResults@2
    displayName: 'Publish test results'
    condition: always()
    inputs:
      testResultsFiles: '$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/tests/test-report.xml'
      failTaskOnFailedTests: true
